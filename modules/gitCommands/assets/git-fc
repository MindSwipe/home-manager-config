#!/usr/bin/env fish
# a script to generate conventional commit messages
argparse 'm/message=' 'a/add' 'd/dry-run' 't/type=' 'n/no-verify' 'v/verbose' -- $argv

# Print a string if the verbose flag is set
set verbose $_flag_v
function printv -a message
    if test "$verbose"
        echo "$message"
    end
end

if not test status
    echo "Failed to parse arguments, status: $status"
    return $status
end

# Get message from the argument or use the first positional argument
if set -ql _flag_m
    set message $_flag_m
else
    set message $argv[1]
end

if not test -n "$message"
    echo "message could not be set"
    return 1
end

# Parse current branch, and set CC scope
set current_branch (git rev-parse --abbrev-ref HEAD)
string match -qr 'feature/(?<cc_scope>.*)' "$current_branch" -- $cc_scope

# Parse and pass any known arguments
set -l git_args

if set -ql _flag_a
    set -a git_args "-a"
end

if set -ql _flag_n
    set -a git_args "--no-verify"
end

set cc_type "feat"
if test -n "$_flag_t"
    set cc_type $_flag_t
end

if test -n "$cc_scope"
    set cc_type "$cc_type($cc_scope)" 
else
    set default_cc_type $(git config --local user.defaultCcScope)
    if test -n "$default_cc_type"
        set cc_type "$cc_type($default_cc_type)"
    else
        printv "Conventional commit scope could not be inferred from branch or user.defaultCcScope git config, omitting it"
    end
end

set -a git_args -m (string join ": " $cc_type $message)

if set -ql _flag_d
    echo "dry run: git commit $git_args"
else
    git commit $git_args
end